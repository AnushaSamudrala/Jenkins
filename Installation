
Steps to create jobs: 

Step 1: Go to Jenkins --> New Item--> give the details of the item.

Details of the project like Enter the item name(Test Project)
Here, there are two options; we can select either Free- style project or multi-configuration project. 
(I have selected a free-style project).
Then, click on ok.


 
Now,after selecting the project, it is taken to another screen showing options to provide different details of the job.
Here, we have five options :
1.	General
2.	Source code management
3.	Build Triggers
4.	Build
5.	Post build actions


1.	General:
We can give the description of the project.( This is the test project one)
We can also use HTML tags for the description.
<h2>This is the test project one</h2>
Also, we can preview the project description to check how it looks.

 

2.	Source code management:
Go to the source code management section, so here if you want to take the builds from any source code system like git or sub version 
here you will get the details of it.
So, for those source code repositories we need to add the plugins which are not added.
 
3.	Build Triggers:
In build triggers, we have many options like:
•	Build triggers remotely(e.g., from scripts)
•	Build after other projects are built.
•	Build periodically
•	Poll SCM (we have source code management system, and in case if we have configured with any SCM like git repository as soon as build 
takes place in that repository of a job should get executed).

Build triggers remotely is: 

Build after other projects are built:

Build periodically:
We can give some expression here and based on that expression our job will be executed at some particular interval.
To know exactly the details of these expressions, we can click on help icon(? symbol) and it will show what are all the parameters.
syntax: MINUTE HOUR DOM MONTH DOW
The values for date, month, hour, minute and the descriptions are mentioned.

//** These is the entire description that you can find on Jenkins:
This field follows the syntax of cron (with minor differences). Specifically, each line consists of 5 fields separated by TAB or whitespace:
MINUTE HOUR DOM MONTH DOW
MINUTE	Minutes within the hour (0–59)
HOUR	The hour of the day (0–23)
DOM	The day of the month (1–31)
MONTH	The month (1–12)
DOW	The day of the week (0–7) where 0 and 7 are Sunday.
To specify multiple values for one field, the following operators are available. In the order of precedence,
* specifies all valid values
M-N specifies a range of values
M-N/X or */X steps by intervals of X through the specified range or whole valid range
A,B,...,Z enumerates multiple values
To allow periodically scheduled tasks to produce even load on the system, the symbol H (for “hash”) should be used wherever possible. 
For example, using 0 0 * * * for a dozen daily jobs will cause a large spike at midnight. In contrast, using H H * * * would still 
execute each job once a day, but not all at the same time, better using limited resources.
The H symbol can be used with a range. For example, H H(0-7) * * * means some time between 12:00 AM (midnight) to 7:59 AM. 
You can also use step intervals with H, with or without ranges.
The H symbol can be thought of as a random value over a range, but it actually is a hash of the job name, not a random function, 
so that the value remains stable for any given project.
Beware that for the day of month field, short cycles such as */3 or H/3 will not work consistently near the end of most months, 
due to variable month lengths. For example, */3 will run on the 1st, 4th, …31st days of a long month, then again the next day of the 
next month. Hashes are always chosen in the 1-28 range, so H/3 will produce a gap between runs of between 3 and 6 days at the end of a 
month. (Longer cycles will also have inconsistent lengths but the effect may be relatively less noticeable.)
Empty lines and lines that start with # will be ignored as comments.
In addition, @yearly, @annually, @monthly, @weekly, @daily, @midnight, and @hourly are supported as convenient aliases. 
These use the hash system for automatic balancing. For example, @hourly is the same as H * * * * and could mean at any time during 
the hour. @midnight actually means some time between 12:00 AM and 2:59 AM.
Examples:
# every fifteen minutes (perhaps at :07, :22, :37, :52)
H/15 * * * *
# every ten minutes in the first half of every hour (three times, perhaps at :04, :14, :24)
H(0-29)/10 * * * *
# once every two hours at 45 minutes past the hour starting at 9:45 AM and finishing at 3:45 PM every weekday.
45 9-16/2 * * 1-5
# once in every two hours slot between 9 AM and 5 PM every weekday (perhaps at 10:38 AM, 12:38 PM, 2:38 PM, 4:38 PM)
H H(9-16)/2 * * 1-5
# once a day on the 1st and 15th of every month except December
H H 1,15 1-11 *
Time zone specification
Periodic tasks are normally executed at the scheduled time in the time zone of the Jenkins master JVM (currently America/Chicago). 
This behavior can optionally be changed by specifying an alternative time zone in the first line of the field. Time zone specification 
starts with TZ=, followed by the ID of a time zone.
Complete example of a schedule with a time zone specification:
    TZ=Europe/London
    # This job needs to be run in the morning, London time
    H 8 * * *
    # Butlers do not have a five o'clock, so we run the job again
    H(0-30) 17 * * *
The supported time zones depend on the Java runtime Jenkins is running on. 
In the schedule say, I want to give *’s in all the parameters with a space between them and as soon as I click outside of the schedule, 
Jenkins gives a message of the timings as shown in the figure. 
Build:
In build we can select the option of Execute windows batch command if we are using windows or Execute shell if you are using Mac.
Then give the basic command like date that which can be executed on command prompt. 
Post build actions:
This is very important because if you want to build another project after this particular project is completed or if you want to send 
some Junit notification or if you want to trigger some acceptance test or performance test.
All these options are shown in the figure below. 
Now, here I am not using any post build operations. So, just click on apply and save.
Then the project page appears. The list of the time Zones that are supported are specified in the description on Jenkins.**//

PCM:

----------------------------------------------------------------------------------------------------------------------------------------
 
Now go to back to dashboard, then you can see the project.
In dashboard we have different columns:
1.	S – Status of the last build.
Represented by a small ball.
If the ball is in grey color; the project is not yet build.
If the ball is in blue color; the build is succeeded
If the ball is in red color; the build is failed.

The project can be build by right clicking on the project or by building it after cliking and going into the project.

 

Another way:

 
After the build, the status of the project is indicated by a ball. Here, the ball is in red color indicating the build failure.
 

2. Weather report: showing the aggregated status of the recent builds

This column takes into account the last five runs of the jobs or the project and Based on the project success / failure of the last 
five builds the weather icon gets changed.







Now, go to configure and make some mistake in the command. Let’s observe what happens!!

 

 
Here, I made a mistake dat instead of date. So, the status of the build depends on the last build and the weather changes based on the 
last five builds.
If I run the build again, it changes to cloudy.
We can see the build history and the build no.’s are indicated by # followed by number.
 


